https://google.github.io/styleguide/javaguide.html#s1-introduction


1 Introduction
This document serves as the complete definition of Google's coding standards for source code in the Java™ Programming Language.
 A Java source file is described as being in Google Style if and only if it adheres to the rules herein.

Like other programming style guides, the issues covered span not only aesthetic issues of formatting,
but other types of conventions or coding standards as well. However, this document focuses primarily on the hard-and-fast rules
that we follow universally, and avoids giving advice that isn't clearly enforceable (whether by human or tool).

1.1 Terminology notes
In this document, unless otherwise clarified:

The term class is used inclusively to mean an "ordinary" class, enum class, interface or annotation type (@interface).
The term member (of a class) is used inclusively to mean a nested class, field, method, or constructor; that is, all top-level contents of a class except initializers and comments.
The term comment always refers to implementation comments. We do not use the phrase "documentation comments", instead using the common term "Javadoc."
Other "terminology notes" will appear occasionally throughout the document.


1.2 Guide notes
Example code in this document is non-normative. That is, while the examples are in Google Style, they may not illustrate the only stylish way to represent the code. Optional formatting choices made in examples should not be enforced as rules.


2 Source file basics

2.1 File name
The source file name consists of the case-sensitive name of the top-level class it contains (of which there is exactly one), plus the .java extension.

2.2 File encoding: UTF-8
Source files are encoded in UTF-8.



----------------------8/26/2020-----------------------

2.3 Special characters
2.3.1 Whitespace characters
Aside from the line terminator sequence, the ASCII horizontal space character (0x20) is the only whitespace character that appears anywhere in a source file. This implies that:

1. All other whitespace characters in string and character literals are escaped.
2. Tab characters are not used for indentation.

2.3.2 Special escape sequences
For any character that has a special escape sequence (\b, \t, \n, \f, \r, \", \' and \\), that sequence is used rather than the corresponding octal (e.g. \012) or Unicode (e.g. \u000a) escape.

Escape sequence \f - form feed - what exactly is it?
https://stackoverflow.com/questions/4334370/escape-sequence-f-form-feed-what-exactly-is-it

It skips to the start of the next page. (Applies mostly to terminals where the output device is a printer rather than a VDU.)

What's the Use of '\r' escape sequence?
https://stackoverflow.com/questions/7372918/whats-the-use-of-r-escape-sequence
 printf("Hey this is my first hello world \r");
The program is printing "Hey this is my first hello world ", then it is moving the cursor back to the beginning of the line. How this will look on the screen depends on your environment. It appears the beginning of the string is being overwritten by something, perhaps your command line prompt.

2.3.3 Non-ASCII characters
For the remaining non-ASCII characters, either the actual Unicode character (e.g. ∞) or the equivalent Unicode escape (e.g. \u221e) is used.
The choice depends only on which makes the code easier to read and understand, although Unicode escapes outside string literals and
comments are strongly discouraged.

String Literal and String Object
https://www.geeksforgeeks.org/string-initialization-java-string-literal-vs-string-object/


Examples:

Example	Discussion
String unitAbbrev = "μs";	Best: perfectly clear even without a comment.
String unitAbbrev = "\u03bcs"; // "μs"	Allowed, but there's no reason to do this.
String unitAbbrev = "\u03bcs"; // Greek letter mu, "s"	Allowed, but awkward and prone to mistakes.
String unitAbbrev = "\u03bcs";	Poor: the reader has no idea what this is.
return '\ufeff' + content; // byte order mark	Good: use escapes for non-printable characters, and comment if necessary.
Tip: Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are broken and they must be fixed.

3 Source file structure
A source file consists of, in order:

License or copyright information, if present
Package statement
Import statements
Exactly one top-level class
* Exactly one blank line separates each section that is present.

3.1 License or copyright information, if present
If license or copyright information belongs in a file, it belongs here.

3.2 Package statement
The package statement is not line-wrapped. The column limit (Section 4.4, Column limit: 100) does not apply to package statements.


3.3 Import statements

3.3.1 No wildcard imports
Wildcard imports, static or otherwise, are not used.

3.3.2 No line-wrapping
Import statements are not line-wrapped. The column limit (Section 4.4, Column limit: 100) does not apply to import statements.

----------------------8/27/2020-----------------------
3.3.3 Ordering and spacing
Imports are ordered as follows:

All static imports in a single block.
All non-static imports in a single block.
If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.

Within each block the imported names appear in ASCII sort order. (Note: this is not the same as the import statements being in ASCII sort order, since '.' sorts before ';'.)
https://jackie880823.gitbooks.io/google-java-style/content/3.3.3%20Ordering%20and%20spacing.html
3.3.4 No static import for classes
Static import is not used for static nested classes. They are imported with normal imports.


----------------------8/29/2020-----------------------
